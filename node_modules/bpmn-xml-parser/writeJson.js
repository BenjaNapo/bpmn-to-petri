import {
  participant,
  messageFlow,
  messageSender,
  messageReceiver,
  originOfTrigger,
  conditionalElement,
  parsedMessageFlow
} from "./models/jsonModels";

export default class WriteJson {
  constructor() {
    this.participants = [];
    this.messageFlows = [];
    this.messageSenders = [];
    this.messageReceivers = [];
    this.originOfTriggerArr = [];
    this.conditionalElementsArr = [];
    this.parsedMessageFlowResult = [];
  }

  addParticipant(id, participantName, processId) {
    let newParticipant = JSON.parse(JSON.stringify(participant));
    if (this._isDefined(id)) newParticipant.participantId = id;
    if (this._isDefined(participantName))
      newParticipant.participantName = participantName;
    if (this._isDefined(processId)) newParticipant.processId = processId;
    this.participants.push(newParticipant);
  }

  addMessageFlow(id, name, fromId, toId) {
    let newMessageFlow = JSON.parse(JSON.stringify(messageFlow));
    if (this._isDefined(id)) newMessageFlow.id = id;
    if (this._isDefined(name)) newMessageFlow.name = name;
    if (this._isDefined(fromId)) newMessageFlow.fromId = fromId;
    if (this._isDefined(toId)) newMessageFlow.toId = toId;

    this.messageFlows.push(newMessageFlow);
  }

  addMessageSender(id, name, type, processId, processVersion) {
    let newMessageSender = JSON.parse(JSON.stringify(messageSender));
    if (this._isDefined(id)) newMessageSender.id = id;
    if (this._isDefined(name)) newMessageSender.name = name;
    if (this._isDefined(type)) newMessageSender.type = type;
    if (this._isDefined(processId)) newMessageSender.processId = processId;
    if (this._isDefined(processVersion))
      newMessageSender.processVersion = processVersion;

    this.messageSenders.push(newMessageSender);
  }

  addMessageReceiver(id, name, type, processId, processVersion) {
    let newMessageReceiver = JSON.parse(JSON.stringify(messageReceiver));
    if (this._isDefined(id)) newMessageReceiver.id = id;
    if (this._isDefined(name)) newMessageReceiver.name = name;
    if (this._isDefined(type)) newMessageReceiver.type = type;
    if (this._isDefined(processId)) newMessageReceiver.processId = processId;
    if (this._isDefined(processVersion))
      newMessageReceiver.processVersion = processVersion;

    this.messageReceivers.push(newMessageReceiver);
  }

  _createOriginOfTriggerArr() {
    for (let i = 0; i < this.messageSenders.length; i++) {
      let messageSender = this.messageSenders[i];
      for (let j = 0; j < this.participants.length; j++) {
        let participant = this.participants[j];
        if (messageSender.processId === participant.processId) {
          let origin = JSON.parse(JSON.stringify(originOfTrigger));
          origin.originProcessId = participant.processId;
          origin.originParticipantName = participant.participantName;
          origin.originProcessVersion = messageSender.processVersion;
          origin.originId = messageSender.id;
          origin.originName = messageSender.name;
          origin.originType = messageSender.type;
          this.originOfTriggerArr.push(origin);
          break;
        }
      }
    }
  }

  _createConditionalElementsArr() {
    for (let messageReceiver of this.messageReceivers) {
      for (let messageFlow of this.messageFlows) {
        if (messageReceiver.id === messageFlow.toId) {
          let conditionalElem = JSON.parse(JSON.stringify(conditionalElement));
          conditionalElem.id = messageReceiver.id;
          conditionalElem.name = messageReceiver.name;
          conditionalElem.type = messageReceiver.type;
          conditionalElem.triggerId = messageFlow.id;
          conditionalElem.triggerName = messageFlow.name;
          for (let origin of this.originOfTriggerArr) {
            if (origin.originId === messageFlow.fromId) {
              conditionalElem.originOfTrigger.push(origin);
            }
          }
          this.conditionalElementsArr.push(conditionalElem);
        }
      }
    }
  }

  _createparsedMessageFlowResult(relevantParticipantNames) {
    for (let participant of this.participants) {
      if (!relevantParticipantNames.includes(participant.participantName))
        continue;
      let parseMf = JSON.parse(JSON.stringify(parsedMessageFlow));
      parseMf.participantId = participant.participantId;
      parseMf.processId = participant.processId;
      parseMf.participantName = participant.participantName;
      for (let receiving of this.messageReceivers) {
        if (participant.processId === receiving.processId) {
          for (let conditionalElement of this.conditionalElementsArr) {
            if (receiving.id === conditionalElement.id) {
              parseMf.processVersion = receiving.processVersion;
              parseMf.conditionalElements.push(conditionalElement);
            }
          }
        }
      }
      if (parseMf.conditionalElements.length > 0) {
        this.parsedMessageFlowResult.push(parseMf);
      }
    }
  }

  buildJson(relevantParticipantNames) {
    this._createOriginOfTriggerArr();
    this._createConditionalElementsArr();

    this._createparsedMessageFlowResult(relevantParticipantNames);
    return this.parsedMessageFlowResult;
  }

  _isDefined(input) {
    if (typeof input !== "undefined") {
      return true;
    }
    return false;
  }
}
