import ReadJson from "./readJson";
import WriteJson from "./writeJson";
import Convert from "xml-js";
import BpmnConfig from "./config/bpmnConfig.js";

export default class XmlParser {
  constructor(xmlText) {
    this.xmlText = xmlText;
    this.convertedJson = null;
    this.extractedEventsObj = null;
    this.collaborationObj = null;
    this.collaborationId = "";
    this.participantObjs = null;
    this.messageFlowObjs = null;
    this.messageReceivers = null;
    this.messageSenders = null;
    this.processObjs = null;
    this.relevantProcesses = [];
    this.bpmnReader = null;
    this._init();
  }

  _init() {
    this.bpmnReader = new ReadJson();
    this._convertXmlTextToJson();
    if (this._setCollaborationObj() == null) return;
    if (this._setParticipantObjs() == null) return;
  }

  getCollaborationId() {
    return this.collaborationId;
  }

  getParticipatingProcesses() {
    let participatingProcesses = [];
    for (let participant of this.participantObjs) {
      if (
        !this._isDefined(participant.attributes) ||
        !this._isDefined(participant.attributes.name)
      ) {
        continue;
      }
      let name = participant.attributes.name;
      if (!participatingProcesses.includes(name) && name !== "") {
        participatingProcesses.push(name);
      }
    }
    return participatingProcesses;
  }

  //participantObj:  { label: participantName, value: participantId }
  getParticipantObjects() {
    let participantObjects = [];
    let participantIds = [];
    for (let participant of this.participantObjs) {
      if (
        !this._isDefined(participant.attributes) ||
        !this._isDefined(participant.attributes.name) ||
        !this._isDefined(participant.attributes.id)
      ) {
        continue;
      }
      let { name, id } = participant.attributes;
      if (!participantIds.includes(id) && id !== "") {
        participantIds.push(id);
        participantObjects.push({ label: name, value: id });
      }
    }
    return participantObjects;
  }

  setRelevantProcesses(processNames) {
    if (processNames.length >= 1) {
      this.relevantProcesses = processNames;
    }
  }

  parseMessageFlows() {
    let jsonWriter = new WriteJson();

    if (this._setProcessObjs() == null) return null;
    if (this._setMessageFlowObjs() == null) return null;
    if (this._setMessageReceivers() == null) return null;
    if (this._setMessageSenders() == null) return null;

    if (this.relevantProcesses.length === 0) {
      this.relevantProcesses = this.getParticipatingProcesses();
    }

    for (let participant of this.participantObjs) {
      if (!this._isDefined(participant.attributes)) {
        continue;
      }
      jsonWriter.addParticipant(
        participant.attributes.id,
        participant.attributes.name,
        participant.attributes.processRef
      );
    }

    for (let messageFlow of this.messageFlowObjs) {
      if (!this._isDefined(messageFlow.attributes)) {
        continue;
      }
      jsonWriter.addMessageFlow(
        messageFlow.attributes.id,
        messageFlow.attributes.name,
        messageFlow.attributes.sourceRef,
        messageFlow.attributes.targetRef
      );
    }

    for (let processObj of this.processObjs) {
      if (!this._isDefined(processObj.elements)) {
        continue;
      }
      for (let processElement of processObj.elements) {
        if (!this._isDefined(processElement.attributes)) {
          continue;
        }
        if (this.messageReceivers.includes(processElement.attributes.id)) {
          let versionTag = this._getVersionTag(
            JSON.stringify(processObj.attributes)
          );
          jsonWriter.addMessageReceiver(
            processElement.attributes.id,
            processElement.attributes.name,
            processElement.name,
            processObj.attributes.id,
            versionTag
          );
        } else if (this.messageSenders.includes(processElement.attributes.id)) {
          let versionTag = this._getVersionTag(
            JSON.stringify(processObj.attributes)
          );
          jsonWriter.addMessageSender(
            processElement.attributes.id,
            processElement.attributes.name,
            processElement.name,
            processObj.attributes.id,
            versionTag
          );
        }
      }
    }

    return jsonWriter.buildJson(this.relevantProcesses);
  }

  _convertXmlTextToJson() {
    this.convertedJson = Convert.xml2js(this.xmlText, {
      compact: false,
      spaces: 4
    });
  }

  _setCollaborationObj() {
    if (BpmnConfig.collaborationLabel == null || this.convertedJson == null)
      return null;
    this.collaborationObj = this.bpmnReader.GetFirstElementByName(
      this.convertedJson,
      BpmnConfig.collaborationLabel
    );
    if (this._isDefined(this.collaborationObj.attributes)) {
      this.collaborationId = this.collaborationObj.attributes.id;
    }
    return this.collaborationObj;
  }

  _setProcessObjs() {
    if (this.collaborationObj == null || BpmnConfig.processLabel == null)
      return null;
    this.processObjs = this.bpmnReader.GetAllElementsByName(
      this.convertedJson,
      BpmnConfig.processLabel
    );
    return this.processObjs;
  }

  _setParticipantObjs() {
    if (this.collaborationObj == null || BpmnConfig.participantLabel == null)
      return null;
    this.participantObjs = this.bpmnReader.GetAllElementsByName(
      this.collaborationObj,
      BpmnConfig.participantLabel
    );
    return this.participantObjs;
  }

  _setMessageFlowObjs() {
    if (this.collaborationObj == null || BpmnConfig.messageFlowLabel == null)
      return null;
    this.messageFlowObjs = this.bpmnReader.GetAllElementsByName(
      this.collaborationObj,
      BpmnConfig.messageFlowLabel
    );
    return this.messageFlowObjs;
  }

  _setMessageReceivers() {
    if (this.messageFlowObjs == null || BpmnConfig.messageFlowLabel == null)
      return null;
    this.messageReceivers = this.bpmnReader.GetEventReceivers(
      this.messageFlowObjs,
      BpmnConfig.messageFlowLabel
    );
    return this.messageReceivers;
  }

  _setMessageSenders() {
    if (this.messageFlowObjs == null || BpmnConfig.messageFlowLabel == null)
      return null;
    this.messageSenders = this.bpmnReader.GetEventSenders(
      this.messageFlowObjs,
      BpmnConfig.messageFlowLabel
    );
    return this.messageSenders;
  }

  _getVersionTag(attributes) {
    if (BpmnConfig.versionTag === null) return "";
    let versionTagIndex = attributes.indexOf(BpmnConfig.versionTag);
    if (versionTagIndex === -1) return "";
    let substr = attributes.slice(
      versionTagIndex + BpmnConfig.versionTag.length,
      attributes.length - 1
    );
    let colonIndex = substr.indexOf(':"');
    if (colonIndex < 1) return "";
    substr = substr.slice(colonIndex + 2, substr.length - 1);
    return substr;
  }

  _isDefined(structure) {
    if (typeof structure !== "undefined") {
      return true;
    }
    return false;
  }
}
